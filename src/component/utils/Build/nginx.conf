worker_processes 1;


events {
	worker_connections 768;
}

http {
    # 知识点6:开启gzip
    gzip on;
    # 启用gzip压缩的最小文件；小于设置值的文件将不会被压缩
    gzip_min_length 1k;
    # gzip 压缩级别 1-9 
    gzip_comp_level 9;
    # 进行压缩的文件类型。
    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;
    # 是否在http header中添加Vary: Accept-Encoding，建议开启
    gzip_vary on;



	include /etc/nginx/mime.types;
	default_type application/octet-stream;
	sendfile	on;
	keepalive_timeout	65;
	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;
    upstream myserver { 
        # 轮询方式 | ip_hash：以客户端IP地址为依据，匹配服务器。 | least_conn：以服务器连接数为依据，哪个服务器连接数少，匹配哪台服务器。
        # ip_hash; 
        # 10秒内如果失败次数达到2次，会停用10秒 server 前面不用加https
        server 192.168.1.123:8088 max_fails=2  fail_timeout=10s;
        # 停用
        # server localhost:8080 weight=10 down;     
        # 长连接数量
        # keepalive 50;
    }
    server {
        listen     80;
        server_name localhost;
        # 知识点1：防盗链
        location /images {
            valid_referers  192.168.80.133 localhost example.*;
            if ($invalid_referer){
                return 403;
            }
            alias /usr/share/nginx/html;
            try_files $uri $uri/ =404;
            # add_header Cache-Control no-cache;
            # add_header Cache-Control private;
        }
        # 知识点2：反向代理
        location /api {
            
            proxy_pass http://192.168.1.123:8088;
            add_header 'Access-Control-Allow-Origin' 闹着玩;
            #允许带上cookie请求
            #add_header 'Access-Control-Allow-Credentials' 'true';
            #允许请求的方法，比如 GET/POST/PUT/DELETE
            #add_header 'Access-Control-Allow-Methods' *;
            #允许请求的header
            #add_header 'Access-Control-Allow-Headers' *;
            # add_header 'Cache-Control' max-age=10;
        }

        # 知识点3：前端文件
		location / {
			root /usr/share/nginx/html;
			try_files $uri/ /index.html last;
			index index.html index.htm;
		}

        # 知识点4:cdn正向代理
        

        location /api_proxy {
            
            proxy_pass http://myserver;
            add_header 'Access-Control-Allow-Origin' *;
            #允许带上cookie请求
            #add_header 'Access-Control-Allow-Credentials' 'true';
            #允许请求的方法，比如 GET/POST/PUT/DELETE
            #add_header 'Access-Control-Allow-Methods' *;
            #允许请求的header
            #add_header 'Access-Control-Allow-Headers' *;
            # add_header 'Cache-Control' max-age=36000000000;
        }
        # 知识点5：server 端口缓存
        # proxy_cache_path  /data/nuget-cache levels=1:2 keys_zone=nuget-cache:20m max_size=50g inactive=168h;
	}
	

}